# Минимальная версия CMake
cmake_minimum_required(VERSION 3.14)

# Название проекта
project(My3DModelViewer)

# Установка стандарта C++17
set(CMAKE_CXX_STANDARD 17)

# Включение автоматической генерации MOC, RCC и UIC
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

# Поиск и подключение необходимых модулей Qt6
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets)

# Список исходных файлов
set(SOURCES
    main.cpp
    model.cpp
    viewer.cpp
    modelviewer.cpp
    mainwindow.cpp
)

# Список заголовочных файлов
set(HEADERS
    model.h
    viewer.h
    modelviewer.h
    mainwindow.h
)

# Создание исполняемого файла с указанием исходных и заголовочных файлов
add_executable(My3DModelViewer
    ${SOURCES}
    ${HEADERS}
)

# Подключение библиотек Qt6 к проекту
target_link_libraries(My3DModelViewer PRIVATE Qt6::Core Qt6::Gui Qt6::Widgets)

1. main.cpp
#include <QApplication>  // Основной класс приложения Qt
#include "mainwindow.h"  // Заголовочный файл главного окна

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);  // Создание объекта приложения
    MainWindow window;             // Создание объекта главного окна
    window.show();                 // Отображение главного окна
    return app.exec();             // Запуск основного цикла приложения
}


2. mainwindow.cpp
#include "modelviewer.h"
#include <QVBoxLayout>
#include <QFileDialog>
#include <QMessageBox>

ModelViewer::ModelViewer(QWidget *parent)
    : QWidget(parent), model(new Model()), viewer(new Viewer(this))
{
    QVBoxLayout *layout = new QVBoxLayout(this);
    layout->addWidget(viewer);
    setLayout(layout);
}

bool ModelViewer::loadModel(const QString &filePath)
{
    if (model->load(filePath)) {
        viewer->setModel(model);
        // Автоматическое масштабирование при загрузке модели
        QVector3D dimensions = model->getModelDimensions();
        float maxDimension = qMax(dimensions.x(), qMax(dimensions.y(), dimensions.z()));
        if (maxDimension > 0) {
            viewer->setScale(1.0f / maxDimension * 200); // Масштабирование для полного отображения
        }
        return true;
    } else {
        QMessageBox::critical(this, "Ошибка", "Не удалось загрузить модель.");
        return false;
    }
}

QVector3D ModelViewer::getModelDimensions() const {
    return model->getModelDimensions();
}

double ModelViewer::calculateVolume() const {
    return model->calculateVolume();
}

double ModelViewer::calculateProjectionArea() const {
    return model->calculateProjectionArea();
}



2.1 mainwindow.h
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow> // Основной класс для создания главного окна
#include "modelviewer.h" // Подключение класса ModelViewer для работы с 3D-моделью

class MainWindow : public QMainWindow
{
    Q_OBJECT // Макрос для поддержки сигналов и слотов

public:
    // Конструктор главного окна
    MainWindow(QWidget *parent = nullptr);

    // Деструктор
    ~MainWindow();

private slots:
    // Слот для открытия модели
    void openModel();

    // Слот для сохранения текста (заголовка окна) в файл
    void saveText();

private:
    // Указатель на виджет для отображения и работы с 3D-моделью
    ModelViewer *modelViewer;
};

#endif // MAINWINDOW_H


3. model.cpp
#include "model.h"
#include <QFile> // Для работы с файлами
#include <QTextStream> // Для чтения текстовых данных
#include <cmath> // Для математических операций

// Конструктор модели
Model::Model() {}

// Загрузка модели из файла
bool Model::load(const QString &filePath) {
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return false;

    // Очистка предыдущих данных
    vertices.clear();
    faces.clear();

    QTextStream in(&file);
    while (!in.atEnd()) {
        QString line = in.readLine();
        QStringList parts = line.split(" ", Qt::SkipEmptyParts);
        if (parts.isEmpty()) continue;

        // Обработка вершин
        if (parts[0] == "v") {
            float x = parts[1].toFloat() / 1000.0f; // Перевод из мм в м
            float y = parts[2].toFloat() / 1000.0f;
            float z = parts[3].toFloat() / 1000.0f;
            vertices.append(QVector3D(x, y, z));
        }
        // Обработка граней
        else if (parts[0] == "f") {
            QVector<int> face;
            for (int i = 1; i < parts.size(); ++i) {
                face.append(parts[i].split("/")[0].toInt() - 1); // Индексация с 0
            }
            faces.append(face);
        }
    }

    file.close();
    return true;
}

// Расчет объема модели
double Model::calculateVolume() const {
    double volume = 0.0;
    for (const QVector<int> &face : faces) {
        if (face.size() < 3) continue;
        const QVector3D &v0 = vertices[face[0]];
        const QVector3D &v1 = vertices[face[1]];
        const QVector3D &v2 = vertices[face[2]];
        volume += v0.x() * v1.y() * v2.z() + v1.x() * v2.y() * v0.z() + v2.x() * v0.y() * v1.z()
                - v0.z() * v1.y() * v2.x() - v1.z() * v2.y() * v0.x() - v2.z() * v0.y() * v1.x();
    }
    return std::abs(volume) / 6.0;
}

// Расчет площади проекции модели
double Model::calculateProjectionArea() const {
    double area = 0.0;
    for (const QVector<int> &face : faces) {
        if (face.size() < 3) continue;
        const QVector3D &v0 = vertices[face[0]];
        const QVector3D &v1 = vertices[face[1]];
        const QVector3D &v2 = vertices[face[2]];
        area += std::abs((v1.x() - v0.x()) * (v2.y() - v0.y()) - (v2.x() - v0.x()) * (v1.y() - v0.y())) / 2.0;
    }
    return area;
}

// Получение размеров модели
QVector3D Model::getModelDimensions() const {
    if (vertices.isEmpty()) return QVector3D(0, 0, 0);

    float minX = vertices[0].x(), maxX = vertices[0].x();
    float minY = vertices[0].y(), maxY = vertices[0].y();
    float minZ = vertices[0].z(), maxZ = vertices[0].z();

    for (const QVector3D &vertex : vertices) {
        if (vertex.x() < minX) minX = vertex.x();
        if (vertex.x() > maxX) maxX = vertex.x();
        if (vertex.y() < minY) minY = vertex.y();
        if (vertex.y() > maxY) maxY = vertex.y();
        if (vertex.z() < minZ) minZ = vertex.z();
        if (vertex.z() > maxZ) maxZ = vertex.z();
    }

    return QVector3D(maxX - minX, maxY - minY, maxZ - minZ);
}

// Получение списка вершин
const QVector<QVector3D>& Model::getVertices() const {
    return vertices;
}

// Получение списка граней
const QVector<QVector<int>>& Model::getFaces() const {
    return faces;
}

// Поворот модели вокруг оси X
void Model::rotateX(float angle) {
    float rad = qDegreesToRadians(angle); // Преобразуем угол в радианы
    for (QVector3D &vertex : vertices) {
        float y = vertex.y() * cos(rad) - vertex.z() * sin(rad);
        float z = vertex.y() * sin(rad) + vertex.z() * cos(rad);
        vertex.setY(y);
        vertex.setZ(z);
    }
}

// Поворот модели вокруг оси Y
void Model::rotateY(float angle) {
    float rad = qDegreesToRadians(angle); // Преобразуем угол в радианы
    for (QVector3D &vertex : vertices) {
        float x = vertex.x() * cos(rad) + vertex.z() * sin(rad);
        float z = -vertex.x() * sin(rad) + vertex.z() * cos(rad);
        vertex.setX(x);
        vertex.setZ(z);
    }
}

// Поворот модели вокруг оси Z
void Model::rotateZ(float angle) {
    float rad = qDegreesToRadians(angle); // Преобразуем угол в радианы
    for (QVector3D &vertex : vertices) {
        float x = vertex.x() * cos(rad) - vertex.y() * sin(rad);
        float y = vertex.x() * sin(rad) + vertex.y() * cos(rad);
        vertex.setX(x);
        vertex.setY(y);
    }
}





3.1 model.h
#ifndef MODEL_H
#define MODEL_H

#include <QVector> // Для использования QVector
#include <QVector3D> // Для работы с 3D-векторами

class Model
{
public:
    // Конструктор
    Model();

    // Загрузка модели из файла
    bool load(const QString &filePath);

    // Вычисление объема модели
    double calculateVolume() const;

    // Вычисление площади проекции модели
    double calculateProjectionArea() const;

    // Получение размеров модели (ширина, высота, глубина)
    QVector3D getModelDimensions() const;

    // Получение списка вершин модели
    const QVector<QVector3D>& getVertices() const;

    // Получение списка граней модели
    const QVector<QVector<int>>& getFaces() const;

    // Поворот модели вокруг оси X
    void rotateX(float angle);

    // Поворот модели вокруг оси Y
    void rotateY(float angle);

    // Поворот модели вокруг оси Z
    void rotateZ(float angle);

private:
    QVector<QVector3D> vertices; // Список вершин модели
    QVector<QVector<int>> faces; // Список граней модели
};

#endif // MODEL_H




4. modelviewer.cpp
##include "modelviewer.h"
#include <QVBoxLayout>
#include <QFileDialog>
#include <QMessageBox>

ModelViewer::ModelViewer(QWidget *parent)
    : QWidget(parent), model(new Model()), viewer(new Viewer(this))
{
    QVBoxLayout *layout = new QVBoxLayout(this);
    layout->addWidget(viewer);
    setLayout(layout);
}

bool ModelViewer::loadModel(const QString &filePath)
{
    if (model->load(filePath)) {
        viewer->setModel(model);
        // Автоматическое масштабирование при загрузке модели
        QVector3D dimensions = model->getModelDimensions();
        float maxDimension = qMax(dimensions.x(), qMax(dimensions.y(), dimensions.z()));
        if (maxDimension > 0) {
            viewer->setScale(1.0f / maxDimension * 200); // Масштабирование для полного отображения
        }
        return true;
    } else {
        QMessageBox::critical(this, "Ошибка", "Не удалось загрузить модель.");
        return false;
    }
}

QVector3D ModelViewer::getModelDimensions() const {
    return model->getModelDimensions();
}

double ModelViewer::calculateVolume() const {
    return model->calculateVolume();
}

double ModelViewer::calculateProjectionArea() const {
    return model->calculateProjectionArea();
}



4.1 modelviewer.h
#ifndef MODELVIEWER_H
#define MODELVIEWER_H

#include <QWidget>
#include "model.h"
#include "viewer.h"

class ModelViewer : public QWidget
{
    Q_OBJECT

public:
    ModelViewer(QWidget *parent = nullptr);
    bool loadModel(const QString &filePath);

    QVector3D getModelDimensions() const;
    double calculateVolume() const;
    double calculateProjectionArea() const;

private:
    Model *model;
    Viewer *viewer;
};

#endif // MODELVIEWER_H




5. viewer.cpp
#include "viewer.h"
#include <QPainter>
#include <QPen>
#include <QMouseEvent>
#include <QWheelEvent>
#include <QTimer> // Добавлен для плавного вращения

Viewer::Viewer(QWidget *parent)
    : QWidget(parent), model(nullptr), rotationX(0), rotationY(0), scale(1.0),
      targetRotationX(0), targetRotationY(0)
{
    setMinimumSize(400, 400);
    setMouseTracking(true);

    // Инициализация таймера для плавного вращения
    rotationTimer = new QTimer(this);
    connect(rotationTimer, &QTimer::timeout, this, &Viewer::updateRotation);
    rotationTimer->start(16); // ~60 FPS (16 мс)
}

void Viewer::setModel(Model *model)
{
    this->model = model;
    update();
}

void Viewer::setScale(float scale)
{
    this->scale = scale;
    update();
}

void Viewer::paintEvent(QPaintEvent *event)
{
    Q_UNUSED(event);

    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing);

    if (!model) {
        painter.drawText(rect(), Qt::AlignCenter, "Модель не загружена");
        return;
    }

    // Очистка экрана перед отрисовкой новой модели
    painter.fillRect(rect(), Qt::white);

    // Отрисовка модели
    const QVector<QVector3D> &vertices = model->getVertices();
    const QVector<QVector<int>> &faces = model->getFaces();

    painter.setPen(QPen(Qt::black, 2));
    for (const QVector3D &vertex : vertices) {
        float x = vertex.x() * cos(rotationY) - vertex.z() * sin(rotationY);
        float z = vertex.x() * sin(rotationY) + vertex.z() * cos(rotationY);
        float y = vertex.y() * cos(rotationX) - z * sin(rotationX);
        z = vertex.y() * sin(rotationX) + z * cos(rotationX);

        QPointF point((x * scale) + width() / 2, height() / 2 - (y * scale));
        painter.drawEllipse(point, 3, 3);
    }

    painter.setPen(QPen(Qt::blue, 2));
    for (const QVector<int> &face : faces) {
        if (face.size() < 3) continue;
        QPolygonF polygon;
        for (int index : face) {
            const QVector3D &vertex = vertices[index];
            float x = vertex.x() * cos(rotationY) - vertex.z() * sin(rotationY);
            float z = vertex.x() * sin(rotationY) + vertex.z() * cos(rotationY);
            float y = vertex.y() * cos(rotationX) - z * sin(rotationX);
            z = vertex.y() * sin(rotationX) + z * cos(rotationX);

            QPointF point((x * scale) + width() / 2, height() / 2 - (y * scale));
            polygon << point;
        }
        painter.drawPolygon(polygon);
    }
}
void Viewer::mousePressEvent(QMouseEvent *event)
{
    if (event->button() == Qt::LeftButton) {
        lastMousePosition = event->pos();
    }
}

void Viewer::mouseMoveEvent(QMouseEvent *event)
{
    if (event->buttons() & Qt::LeftButton) {
        // Обновляем целевые углы поворота
        targetRotationX += (event->y() - lastMousePosition.y()) * 0.5;
        targetRotationY += (event->x() - lastMousePosition.x()) * 0.5;
        lastMousePosition = event->pos();
    }
}

void Viewer::wheelEvent(QWheelEvent *event)
{
    // Масштабирование модели
    if (event->angleDelta().y() > 0) {
        scale *= 1.1; // Увеличение масштаба
    } else {
        scale /= 1.1; // Уменьшение масштаба
    }
    update(); // Обновляем отображение при изменении масштаба
}

void Viewer::updateRotation()
{
    // Плавное изменение углов поворота
    float deltaX = (targetRotationX - rotationX) * 0.1f;
    float deltaY = (targetRotationY - rotationY) * 0.1f;

    rotationX += deltaX;
    rotationY += deltaY;

    // Обновляем отображение
    update();
}


5.1 viewer.h
#ifndef VIEWER_H
#define VIEWER_H

#include <QWidget>
#include <QTimer> // Добавлен для плавного вращения
#include "model.h"

class Viewer : public QWidget
{
    Q_OBJECT

public:
    Viewer(QWidget *parent = nullptr);
    void setModel(Model *model);
    void setScale(float scale);

protected:
    void paintEvent(QPaintEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override;
    void mouseMoveEvent(QMouseEvent *event) override;
    void wheelEvent(QWheelEvent *event) override;

private slots:
    void updateRotation(); // Слот для обновления углов поворота

private:
    Model *model;
    QPoint lastMousePosition;
    float rotationX;
    float rotationY;
    float scale;
    QTimer *rotationTimer; // Таймер для плавного вращения
    float targetRotationX; // Целевой угол поворота по X
    float targetRotationY; // Целевой угол поворота по Y
};

#endif // VIEWER_H



Структура программы:
My3DModelViewer/
├── CMakeLists.txt
├── main.cpp
├── model.h
├── model.cpp
├── viewer.h
├── viewer.cpp
├── modelviewer.h
├── modelviewer.cpp
├── mainwindow.h
└── mainwindow.cpp

Доработай программу: 1. Добавь плавное вращение модели в код и возможность регулировать скорость вращения модели obj в окне просмотра. Напиши, как я могу регулировать вращение в окне просмотра. Отобрази измененные файлы программы, каждый файл отдельным сообщением. Код измененных файлов проекта закомментируй.
